package SrnaTools::Job::Mirprof ;
use base SrnaTools::Job ; # requires Tool and isa Tool

use strict ;
use warnings ;

#######################################################
# The constructor is only implemented 
# in the base class
#######################################################


#######################################################
# Accessors
#######################################################

#######################################################
# accessors for tool config items
#######################################################
sub mirbase_dbs{$_[0]->cfg->{mirbase_dbs} }
sub min_seq_size{$_[0]->cfg->{min_seq_size} }
sub max_seq_size{$_[0]->cfg->{max_seq_size} }
sub mismatches{$_[0]->cfg->{mismatches} }

# section = plant pre/mature, animal pre/mature
sub mirbase_db_filename{
  my ($self, $section, $flavour) = @_ ;
  SrnaTools::Exception->throw(message=>"requires section and flavour parameters",log_msg=>"The section of miRBase is plant_mature, animal_precursor etc., the flavour is with or without Xs for overhang matching") unless $section && $flavour ;
  $self->mirbase_dbs->{$section}{$flavour};
}


#######################################################
# Some additional tool-specific initialisation
# of new objects.
# Here we need to get the name of the mirbase file
# which depends on the setting of 'overhangs'
#######################################################
sub _init{
  my $self = shift ;
  
  # First do whatever the base class wants
  $self->SUPER::_init(@_) ;
  
  # Get name of mirbase file
  if (defined $self->{_params}) {
    $self->{_params}{mirbase_file} = $self->_get_mirbase_file ;
  }
  
}


#######################################################
# Run the job.
# The code that carries out the actual data preparation
# and analysis is organised into Modules (see 
# lib/SrnaTools::Module).
#
# Modules have full access to the Job and App instances
# that run them, so they can access config data directly.
# Parameters could also be accessed directly but they
# are better handled here, so we explicityl pass them
# in using the _run_module method:
# $self->_run_module('name_of_module', {parameters})
#
# The module name can be given in lower case with
# underscores or in camel-case, so 
# 'my_module' and 'MyModule' would both load a package
# lib/SrnaTools/Module/MyModule.pm
#######################################################
sub run{
  my $self = shift ;
  
  $self->SUPER::run(@_);
   #print Data::Dumper->Dump([$self]);exit;
   
  if (defined $self->param('overhangs') ) {
    $self->_run_module(
      'check_mirbase_xs', {
        file => $self->param('mirbase_file'), 
      }
    )
  }

  $self->_run_module(
    'filter_by_seq_properties',{
      filter_low_comp => 1,
      min_length => $self->min_seq_size,
      max_length => $self->max_seq_size,
      outfile => 'nr_seqs.infile',
    } 
  ) ;
  
  # filter t/rRNA matches
  if (defined $self->param('trrna') ) {
    $self->_run_module(
      'run_patman',{
        ref_seq => $self->trrna_file, 
        infile  => 'nr_seqs.infile',
        outfile => 'patman.trrna.out',
        status_msg => 'matching to t and rRNAs',
      } 
    ) ;
     $self->_run_module(
      'filter_matches',{
        infile  => 'patman.trrna.out',
        filter_name => 'filter t/rRNA',
      } 
    ) ;
  } 
  
  # filter genome matches
  if (defined $self->param('genome') && $self->param('genome') ne 'none') {
    $self->_run_module(
      'run_patman',{
        ref_seq => $self->param('genome'), 
        infile  => 'nr_seqs.infile',
        outfile => 'patman.genome.out',
        status_msg => 'matching to genome',
      } 
    ) ;
     $self->_run_module(
      'filter_matches',{
        infile  => 'patman.genome.out',
        filter_name => 'filter genome',
        filter_nomatch => 1, # remove sequences without match
      } 
    ) ;
  }
  
  # match to miRBase
  $self->_run_module(
    'run_patman',{
      ref_seq => $self->param('mirbase_file'), 
      infile  => 'nr_seqs.infile',
      remove_infiles => 1,
      same_strand => 1, # was 's'
      mismatches =>  $self->param('mismatches'), # was 'e'
      outfile => 'patman.mirbase.out',
      status_msg => 'matching to miRBase',
    } 
  ) ;
  
  #print Data::Dumper->Dump([$self]);exit;
  # run mirprof
  $self->_run_module(
    'mirprof',{
      ref_seq               => $self->param('mirbase_file'), 
      infile                => 'patman.mirbase.out',
      ignore_org            => $self->param('group_organisms'),
      ignore_mis            => $self->param('group_mismatches'),
      collapse_match_groups => $self->param('collapse_match_groups'),
      group_family          => $self->param('group_family'),
      group_variant         => $self->param('group_variant'),
      keep_best             => $self->param('keep_best'),
    } 
  ) ;
  

} # run


#######################################################
# Validate input parameters and populate error
# attributes. First call the method in Tool parent
# class for some generic validation then do some stuff
# specific for this tool.
#######################################################
sub _do_validate_user_parameters{
  my $self = shift ;
  my $errors = [] ;
  my $cfg = $self->config ;
  
  # Do some generic validation that is
  # required by all tools and implemented
  # in the parent class
  $self->SUPER::_do_validate_user_parameters ;
  
  ####### This is tool specific validation ############
  
  # We must have an upload file
  if (!$self->param('srna_file') ) {
    $self->_set_param_err('No FASTA file selected for upload.','srna_file');
  }
  
  # A miRBase db must be selected
  if (!$self->param('mirbase_db') ) {
    $self->_set_param_err('No miRBase database selected','mirbase_db') ;
  }
  
  # allowed mismatches must be 0,1,2 or 3
  if ($self->param('mismatches') && $self->param('mismatches')!~/^[0123]$/) {
    $self->_set_param_err('Allowed number of mismatches must be 0,1,2 or 3','mismatches') ;
  }
  
  
} # _do_validate_user_parameters


#######################################################
# Get the mirbase file name from parameters.
# The parameter is a short name such as
# plant_mature and it is associated with
# a display name and two file names,
# one for mathicng with overhangs (fxnmae)
# and one without. The file for overhangs
# contains Xs at the end of the sequences.
# TODO: we culd dispense of all of this
# and create the fx file on the fly each time,
# which wouldn't take long and would make
# it easier to maintain.
#######################################################
sub _get_mirbase_file{
  my $self = shift ;
  
  return undef unless $self->{_params}{mirbase_db} ;
  my $requested_mirbase_section = $self->{_params}{mirbase_db} ; # plant pre/mature, animal pre/mature
  my $flavour = $self->{_params}{overhangs} ? 'fxname' : 'fname' ; #with Xs or without
  my $filename = $self->mirbase_db_filename($requested_mirbase_section, $flavour) ;
  if (!$filename) {
    SrnaTools::Exception::Misconfiguration->throw(message=>"Could not retrieve mirbase file name from config.",log_msg=>"Requested mirbase file: $requested_mirbase_section, flavour(Xs added?): $flavour");
  }
  return $filename ;
} # _get_mirbase_file


# DO NOT DELETE
1 ;