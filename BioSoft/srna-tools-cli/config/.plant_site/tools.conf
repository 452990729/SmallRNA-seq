#!/usr/bin/perl

########################################################
#
# This is a configuration file for the srna-
# tools application.
# This file configures the tool-specific behaviour.
# The application-wide config is stored in application.conf
# 
# The format is normal Perl code that is interpreted by
# the ConifgAuto module in the SrnaTools::Config class.
#
########################################################


use strict;

my %cnf =(

  #############################################
  # This section configures defaults that apply
  # to all tools unless overwritten in specific
  # tool sections
  #############################################
  all => {
  
    # the default processing mode is
    # "on the cluster", each tool's
    # options are: 
    # - queue_remote (cluster)
    # - queue_local  (batch queue)
    # - instant      (run job on server, no queing)
    mode => 'queue_remote',
    
    # use the long queue by default
    queue => 'long',
    
    # available genomes. Array of hashes with d(isplay)name
    # and f(ile)name for each available genome. 
    genomes => [ 
      {dname => 'Arabidopsis thaliana (TAIR, v7)', 
      fname => 'arabidopsis.fa'},
      {dname => 'Populus trichocarpa (DOE JGI, v1.1)', 
      fname => 'poplar.fa'},
      {dname => 'Oryza sativa (TIGR/MSU, v5.0)', 
      fname => 'rice.fa'},
      {dname => 'Oryza sativa Bejing indica (BGI-RIS, v9311)', 
      fname => 'BGI_RIS_indica9311_chromosomes.fa'},
      {dname => 'Physcomitrella patens (DOE JGI, v1.1)', 
      fname => 'physcomitrella.fa'},
      {dname => 'Chlamydomonas reinhardtii (DOE JGI, v4.0)',
      fname => 'chlamydomonas_v4.fa'},
      {dname => 'Solanum lycopersicon (SGN, bacs v219)', 
      fname => 'tomato_v219.fa'},
      {dname => 'Solanum lycopersicon (SGN, bacs v340)', 
      fname => 'tomato_bacs.v340.fa'},
      {dname => 'Medicago truncatula (MGSC, v2.0)', 
      fname => 'Mt_v2.fa'},
      {dname => 'Ricinus communis (TIGR, v0.1)', 
      fname => 'TIGR_castorWGS_release_0.1.assembly.fsa'},
      {dname => 'Vitis vinifera (Genoscope, v04_09_07)', 
      fname => 'vitis04_09_07.fa'},
      {dname => 'Sorghum bicolor (JGI, v1.0 - assembled chr. only)', 
      fname => 'sbi1_chromosomes_only.fa'}
    ], # genomes
    
    # name of the fasta file with all t and r RNAs
    trrna_file  => 't_and_r_RNAs.fa',
    
    # this is the default maximum number of
    # unique sequences that we allow (enforced by
    # filter_by_seq_properties.pl)
    max_number_uniq_seqs => 6e6,
  },
  
  ####################################
  # mirprof section of tool config
  ####################################
  mirprof => {
    mode => 'queue_remote',

    # The display name of the tool that we
    # can use in Emails and on the web
    # If not set, will default to tool-name
    # (lower-case with underscores)
    display_name => 'miRProf',
    
    # A very short description that can be used
    # as a subtitle or in a list of available
    # tools for the command line version
    description => 'Expression profiles of known miRNAs from large scale sRNA data sets ',
  
    # Set to 1 to require email verification
    # before submission
    requires_email => 0,
    
    # use the short queue for this one
    queue => 'short',
    
    # Name parameters that should contain files
    # e.g. for upload through webform
    data_file_params => ['srna_file'],
    
    # Display name and filenames (with and without added Xs)
    # of available miRBase databases
    mirbase_dbs  => {
      'plant_mature' => {
        dname  => 'Viridiplantae, mature miRNAs (miRBase v13)',
        fname  => 'mature_plant.fa',
        fxname => 'mature_plant_plusX.fa'
      },
      'plant_precursor' => {
        dname  => 'Viridiplantae, precursors (miRBase v13)',
        fname  => 'hairpin_plant.fa',
        fxname =>'hairpin_plant_plusX.fa'
      },
      'metazoa_mature' => {
        dname  => 'Metazoa, mature miRNAs (miRBase v13)',
        fname  => 'mature_animal.fa',
        fxname => 'mature_animal_plusX.fa'
      },
      'metazoa_precursor' => {
        dname  => 'Metazoa, precursors (miRBase v13)',
        fname  => 'hairpin_animal.fa', 
        fxname =>'hairpin_animal_plusX.fa'
      },
    }, # mirbase_dbs
    
    min_seq_size  => 18, 
    max_seq_size  => 25,
    mismatches    => 0,
  }, # mirprof section
  
  ####################################
  # mircat section of tool config
  ####################################
  mircat => {
    mode => 'queue_remote',

    # The display name of the tool that we
    # can use in Emails and on the web
    # If not set, will default to tool-name
    # (lower-case with underscores)
    display_name => 'miRCat',
    
    # A very short description that can be used
    # as a subtitle or in a list of available
    # tools for the command line version
    description => 'Identification of miRNA sequences in large-scale sRNA data sets',
  
    # Set to 1 to require email verification
    # before submission
    # TODO set to 1 once email confirmation implemented
    requires_email => 0,
    
    # select queue for cluster
    queue => 'long',
    
    # Name parameters that should contain files
    # e.g. for upload through webform
    data_file_params => ['srna_file'],
    
    # parameters:
    # desc = description
    # def = default
    # min/max (minimum/maximum for numeric params)
    # form = format
    #   'i'   positive integer
    #   'f'   positive float
    #   's'   string
    #   '/P/' regex, where P is the pattern
    min_abundance => {
      desc => 'Minimum sRNA abundance', 
      form => 'i', 
      def  => 5, 
      min  => 1,
    },
    window_length => { 
      desc => 'Window length',
      form => 'i',
      def  => 150,
      min  => 40,
      max  => 400, 
    },
    genomehits => { 
      desc => 'Maximum number of genome hits',
      form => 'i',
      def  => 16,
      min  => 1,
    },
    max_percent_unpaired => { 
      desc => 'Maximum percentage of unpaired bases in hairpin',
      form => 'f',
      def  => 50,
      min  => 1,
      max  => 100, 
    },
    max_overlap_length => {
      desc => 'Maximum total length (nt) of overlapping sRNAs',
      form => 'i',
      def  => 70, 
      min => 30, 
    },
    percent_orientation => {
      desc => 'Percentage of sRNAs in locus that must be in the same orientation',
      form => 'f',
      def  => 90, 
      min  => 1, 
      max  => 100,
    },
    minsize => {
      desc => 'Minimum sRNA size',
      form => 'i',
      def  => 20, 
      min  => 18, 
      max  => 24,
    },
    maxsize => {
     desc => 'Maximum sRNA size',
     form => 'i',
     def  => 22, 
     min  => 18, 
     max  => 24, 
    },
    max_unique_hits => { 
      desc => 'Maximum number of non-overlapping hits in a locus',
      form => 'i',
      def  => 3, 
      min  => 1, 
    },
    min_paired => { 
      desc => 'Minimum number of paired bases in miRNA region',
      form => 'i',
      def  => 17,
      min  => 10,
      max  => 25
    },
    max_gaps => { 
      desc => 'Maximum consecutive unpaired bases in miRNA region',
      form => 'i',
      def  => 3,
      min  => 0,
      max  => 5
    },
    min_gc => { 
      desc => 'Minimum percentage of G/C in miRNA',
      form => 'f',
      def  => 10,
      min  => 1,
      max  => 100
    },
    min_hairpin_len =>{
      desc => 'Minmum length of hairpin (nt)',
      form => 'i',
      def  => 75,
      min  => 50
    },
    pval => {
      desc => 'p-value',
      form => 'f',
      min  => 0,
      max  => 1,
      def  => 0.1,
    },
    no_complex_loops => {
      desc => 'complex loops',
      form => 'i',
      min  => 0,
      def  => 0,
      max  => 1,
    },
    hit_dist => {
      desc => 'distance between hits',
      form => 'i',
      min  => 0,
      def  => 200,
    },
    min_energy => {
      desc => 'minimum free energy',
      form => 'f',
      max => 0,
      def => -25,
    },
  }, # mircat section
  
  ####################################
  # filter-tool section of tool config
  ####################################
  filter => {
    mode => 'queue_remote',

    # The display name of the tool that we
    # can use in Emails and on the web
    # If not set, will default to tool-name
    # (lower-case with underscores)
    display_name => 'Filter',
    
    # A very short description that can be used
    # as a subtitle or in a list of available
    # tools for the command line version
    description => 'Filter sequences from large-scale data sets ',
  
    # Set to 1 to require email verification
    # before submission
    requires_email => 0,
    
    # select queue for cluster
    queue => 'short',
    
    # Name parameters that should contain files
    # e.g. for upload through webform
    data_file_params => ['srna_file'],
    
    minsize => {
     desc => 'Minimum sRNA size',
     form => 'i',
     blank => '--',
     def  => undef,
     min  => 16, 
     max  => 35, 
    },
    maxsize => {
     desc => 'Maximum sRNA size',
     form => 'i',
     blank => '--',
     def  => undef, 
     min  => 16, 
     max  => 35, 
    },
    
  }, # filter section
 
  ####################################
  # adaptor-tool section of tool config
  ####################################
  adaptor => {
    mode => 'queue_remote',

    # The display name of the tool that we
    # can use in Emails and on the web
    # If not set, will default to tool-name
    # (lower-case with underscores)
    display_name => 'Adaptor',
    
    # A very short description that can be used
    # as a subtitle or in a list of available
    # tools for the command line version
    description => 'Remove adaptors from large-scale data sets and convert to FASTA file',
  
    # Set to 1 to require email verification
    # before submission
    requires_email => 0,
    
    # select queue for cluster
    queue => 'short',
    
    # Name parameters that should contain files
    # e.g. for upload through webform
    data_file_params => ['srna_file'],
    
    adaptor_sequence_5 => {
      desc => "5' adaptor sequence",
      form => '/^[AGTCU]+$/i',
      def => 'undef'
    },
    adaptor_sequence_3 => {
      desc => "3' adaptor sequence",
      form => '/^[AGTCU]+$/i',
      def => 'undef',
      not_null => 1,
    },
    minsize => {
     desc => 'Minimum sRNA size',
     form => 'i',
     def  => 18,
     min  => 16, 
     max  => 35, 
    },
    maxsize => {
     desc => 'Maximum sRNA size',
     form => 'i',
     def  => 30, 
     min  => 16, 
     max  => 35, 
    },
  }, # adaptor section
  
  ####################################
  # SiLoCo section of tool config
  ####################################
  siloco => {
    mode => 'queue_remote',

    # The display name of the tool that we
    # can use in Emails and on the web
    # If not set, will default to tool-name
    # (lower-case with underscores)
    display_name => 'SiLoCo',
    
    # A very short description that can be used
    # as a subtitle or in a list of available
    # tools for the command line version
    description => 'Identification and comparison of sRNA-producing loci in large-scale data sets',
  
    # Set to 1 to require email verification
    # before submission
    requires_email => 0,
    
    # use the short queue for this one
    queue => 'long',
    
    # Name parameters that should contain files
    # e.g. for upload through webform
    data_file_params => ['srna_file1','srna_file2'],
    
    sample_name1 => {
      desc => "Name of sample 1",
      form => 's',
      def => 'S1'
    },
    sample_name2 => {
      desc => "Name of sample 2",
      form => 's',
      def => 'S2'
    },
    num_samples => {
      desc => 'Number of samples',
      form => 'i',
      def => 2,
      min => 1,
      max => 2
    },
    min_hits => {
     desc => 'Minimum number of sRNAs in a locus',
     form => 'i',
     def  => 3, 
     min  => 1, 
    },
    max_gap => {
     desc => 'Maximum gap length in a locus',
     form => 'i',
     def  => 300, 
     min  => 1, 
    },
    pseudocount => {
     desc => 'Pseudocount to add to locus expression level (avoid division by zero errors)',
     form => 'f',
     def  => 0.1, 
     min  => 0,
    },
    # Allowed genome browser links. Each one has a base URL 
    # and the parameters part of the URL where *START*, 
    # *STOP* and *CHROM* act as placeholders
    gblinks => {
      tair => {
        base_url => 'http://gbrowse.arabidopsis.org/cgi-bin/gbrowse/arabidopsis/',
        params => '?name=Chr*CHROM*%3A*START*..*STOP*',
        genome => 'arabidopsis',
      },
      asrp => {
        base_url => 'http://asrp.cgrb.oregonstate.edu/cgi-bin/gbrowse/thaliana-v5/',
        params => '?name=*CHROM*%3A*START*..*STOP*',
        genome => 'arabidopsis'
      },
    },
  }, # siloco
  
  ####################################
  # SiLoMa section of tool config
  ####################################
  siloma => {
    mode => 'queue_remote',

    # The display name of the tool that we
    # can use in Emails and on the web
    # If not set, will default to tool-name
    # (lower-case with underscores)
    display_name => 'SiLoMa',
    
    # A very short description that can be used
    # as a subtitle or in a list of available
    # tools for the command line version
    description => 'Generate graphical maps of individual sRNA loci.',
  
    # Set to 1 to require email verification
    # before submission
    requires_email => 0,
    
    # use the short queue for this one
    queue => 'short',
    
    # The job will terminate if we are trying to exceed this number
    # of arrows to draw
    max_num_arrows => 2000,
    
    # Name parameters that should contain files
    # e.g. for upload through webform
    data_file_params => ['srna_file'],
    
    minsize => {
      desc => 'Minimum sRNA size',
      form => 'i',
      def  => 18,
      min  => 16, 
      max  => 35, 
    },
    maxsize => {
      desc => 'Maximum sRNA size',
      form => 'i',
      def  => 30, 
      min  => 16, 
      max  => 35, 
    },
    region_chrom => {
      desc => 'Reference sequence chromosoma',
      form => 's',
    },
    region_start => {
      desc => 'Reference sequence start position',
      form => 'i',
      min  => 1,
    },
    region_end => {
      desc => 'Reference sequence end position',
      form => 'i',
      min  => 1,
    },
    pasted_seq => {
      desc => 'Reference sequence',
      form =>'/^(>.*?\n)?([AGCTUN\s\n]+)$/i',
      form_desc => 'must be FASTA or raw sequence. Allowed symbols: AGCTUN',
      max_len => 5,
    },
   
  }, # siloma
  
  ####################################
  # Phasing-tool section of tool config
  ####################################
  phasing => {
    mode => 'queue_remote',

    # The display name of the tool that we
    # can use in Emails and on the web
    # If not set, will default to tool-name
    # (lower-case with underscores)
    display_name => 'ta-siRNA finder',
    
    # A very short description that can be used
    # as a subtitle or in a list of available
    # tools for the command line version
    description => 'Find phased sRNAs such as ta-siRNAs.',
  
    # Set to 1 to require email verification
    # before submission
    requires_email => 0,
    
    # use the short queue for this one
    queue => 'short',
    
    # Name parameters that should contain files
    # e.g. for upload through webform
    data_file_params => ['srna_file'],
    
    abundance => {
      desc => 'Minimum sRNA abundance',
      form => 'i',
      def  => 2,
      min  => 1, 
    },
    pval => {
      desc => 'p-value cutoff',
      form => 'enum',
      vals => ['0.001', '0.0001', '0.00001', '0.000001', '0.0000001'],
      def  => '0.0001',
    },
      
  }, # phasing
  
  ####################################
  # Hairpin-tool section of tool config
  ####################################
  hp_tool => {
    mode => 'instant',
    
    # Template to display results in (if not the generic one)
    result_page_partial => 'hp_tool_results_page.tt',

    # The display name of the tool that we
    # can use in Emails and on the web
    # If not set, will default to tool-name
    # (lower-case with underscores)
    display_name => 'Hairpin fold/annotate',
    
    # A very short description that can be used
    # as a subtitle or in a list of available
    # tools for the command line version
    description => 'Highlight sRNAs on precursor secondary structure.',
  
    # Set to 1 to require email verification
    # before submission
    requires_email => 0,
    
    longSeq => {
      desc => 'Reference (long) sequence',
      form =>'/^>.*?\n([AGCTUN\s\n]+)$/i',
      form_desc => 'must be 1 FASTA formatted sequence. Allowed nt symbols: AGCTUN',
      max_len => 1100,
      not_null => 1,
    },
    shortSeqs => {
      desc => 'sRNA sequence(s)',
      form =>'/^(>.*?\n([AGCTUN\s\n]+))+$/i',
      form_desc => 'must be one or more FASTA formatted sequence(s)). Allowed nt symbols: AGCTUN',
      max_len => 800,
      not_null => 1,
    }
      
  }, # hp_tool
  
  ####################################
  # Target-tool section of tool config
  ####################################
  target => {
    mode => 'queue_remote',

    # The display name of the tool that we
    # can use in Emails and on the web
    # If not set, will default to tool-name
    # (lower-case with underscores)
    display_name => 'Target prediction tool',
    
    # A very short description that can be used
    # as a subtitle or in a list of available
    # tools for the command line version
    description => 'Prediction of plant miRNA/ta-siRNA target sequences.',
    
    # transcriptomes are stored in a subfolder of the data
    # directory because some of the names would clash with 
    # the genomes
    transcriptomes_subfolder => 'transcriptomes/',
    
    # available transcriptomes
     transcriptomes => [ 
      {dname => 'Arabidopsis thaliana (TAIR, v7)', 
      fname => 'arabidopsis.fa'},
      {fname => 'rape.fa',
      dname => 'Brassica napus - rape (Unigene build #15)'},
      {fname => 'chlamydomonas.fa',
      dname => 'Chlamydomonas reinhardtii (JGI Assembly v.3.1 1st milestone)'},
      {fname => 'soybean.fa',
      dname => 'Glycine max - soybean (Unigene build #32)'},
      {fname => 'cotton.fa',
      dname => 'Gossypium hirsutum - cotton (Unigene build #7)'},
      {fname => 'barley.fa',dname => 'Hordeum vulgare - barley (Unigene build #52)'},
      {fname => 'lotus.fa',
      dname => 'Lotus japonicus (Unigene build #4)'},
      {fname => 'apple.fa',
      dname => 'Malus x domestica - apple (Unigene build #6)'},
      {fname => 'medicago.fa',
      dname => 'Medicago truncatula - barrel medic DFCI build 9.0'},
      {fname => 'tabacum.fa',
      dname => 'Nicotiana tabacum - tobacco (Unigene build #10)'},
      {fname => 'rice.fa',
      dname => 'Oryza sativa - rice (Unigene build #73)'},
      {fname => 'physcomitrella.fa',
      dname => 'Physcomitrella patens (Unigene build #14)'},
      {fname => 'physcomitrella2.fa',
      dname => 'Physcomitrella patens (JGI transcripts, filtered model v1.1)'},
      {fname => 'pine.fa',
      dname => 'Pinus taeda (Unigene build #6)'},
      {fname => 'poplar.fa',
      dname => 'Populus trichocarpa (Unigene build #7)'},
      {fname => 'poplar2.fa',
      dname => 'Populus trichocarpa (JGI release 1.1)'},
      {fname => 'sugarcane.fa',
      dname => 'Saccharum officinarum - sugarcane (Unigene build #13)'},
      {fname => 'tomato.fa',
      dname => 'Solanum lycopersicum - tomato (Unigene build #31)'},
      {fname => 'potato.fa',
      dname => 'Solanum tuberosum - potato (Unigene build #31)'},
      {fname => 'sorghum.fa',
      dname => 'Sorghum bicolor (Unigene build #26)'},
      {fname => 'wheat.fa',
      dname => 'Triticum aestivum - wheat (Unigene build #51)'},
      {fname => 'grape.fa',
      dname => 'Vitis vinifera - grape (Unigene build #7)'},
      {fname => 'maize.fa',
      dname => 'Zea mays - maize (Unigene build #68)'},
    ],
    
    # Set to 1 to require email verification
    # before submission
    requires_email => 0,
    
    # use the short queue for this one
    queue => 'short',
    
    # Name parameters that should contain files
    # e.g. for upload through webform
    data_file_params => ['srna_file'],
    
    pasted_srnas => {
      desc => 'sRNA sequence(s)',
      form =>'/^(>.*?\n([AGCTUN\s\n]+)){1,50}$/i',
      form_desc => 'must be 1 to 50 FASTA formatted sequence(s)). Allowed nt symbols: AGCTUN',
      max_len => 5000,
    },
    
  }, # target
  
  ####################################
  # FiRePat section of tool config
  ####################################
  firepat => {
    mode => 'queue_local',

    # The display name of the tool that we
    # can use in Emails and on the web
    # If not set, will default to tool-name
    # (lower-case with underscores)
    display_name => 'FiRePat',
    
    # A very short description that can be used
    # as a subtitle or in a list of available
    # tools for the command line version
    description => 'Find expression patterns of sRNAs and genes.',
  
    # use the short queue for this one
    queue => 'long',
    
    # Name parameters that should contain files
    # e.g. for upload through webform
    data_file_params => ['srna_file','gene_file'],
    
    # the colour intervals should probably
    # not be made available to user
    color_int => {
      desc => 'Number of colour intervals for html output',
      form => 'i',
      def  => 25,
      min  => 1, 
    },
    de_threshold => {
      desc => 'Differential expression threshold',
      form => 'enum',
      vals => ['5', '10', '20', '25', '30', '35', '40'],
      def  => '5',
    },
    sim_threshold => {
      desc => 'Similarity threshold',
      form => 'enum',
      vals => [ '90', '95', '99' ],
      def  => '95',
    }
  }, # firepat
  
) ;

# DO NOT DELETE THIS
\%cnf ;